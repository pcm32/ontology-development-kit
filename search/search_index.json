{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"AddTermToImport/","text":"NOTE This documentation is incomplete, for now you may be better consulting the GO Editor Docs Adding Terms to the Import Files \u00b6 Terms are imported to GO from other ontologies, but not all terms from external ontologies are imported. Occasionally, you will find that a valid identifier exists in an external ontology, but the identifier is not available in Protege because that term is not yet imported. To import a term from an external ontology: Navigate to the imports folder on GitHub, located at https://github.com/geneontology/go-ontology/tree/master/src/ontology/imports . Look in the list of ontologies for the ontology that contains the term you wish to import. Identify the ontology_terms.txt file for the target ontology. For example, for the addition of a new taxon, the file can be found at https://github.com/geneontology/go-ontology/blob/master/src/ontology/imports/ncbitaxon_terms.txt . Click on the icon of a pencil in the upper right corner of the window to edit the file. Add the new term on the next available line at the bottom of the file. Click preview changes. You can now either commit the file directly to master or create a branch and a pull request as described before.","title":"AddTermToImport"},{"location":"AddTermToImport/#adding-terms-to-the-import-files","text":"Terms are imported to GO from other ontologies, but not all terms from external ontologies are imported. Occasionally, you will find that a valid identifier exists in an external ontology, but the identifier is not available in Protege because that term is not yet imported. To import a term from an external ontology: Navigate to the imports folder on GitHub, located at https://github.com/geneontology/go-ontology/tree/master/src/ontology/imports . Look in the list of ontologies for the ontology that contains the term you wish to import. Identify the ontology_terms.txt file for the target ontology. For example, for the addition of a new taxon, the file can be found at https://github.com/geneontology/go-ontology/blob/master/src/ontology/imports/ncbitaxon_terms.txt . Click on the icon of a pencil in the upper right corner of the window to edit the file. Add the new term on the next available line at the bottom of the file. Click preview changes. You can now either commit the file directly to master or create a branch and a pull request as described before.","title":"Adding Terms to the Import Files"},{"location":"Configs/","text":"NOTE This documentation is incomplete, for now you may be better consulting the [http://wiki.geneontology.org/index.php/Protege_setup_for_GO_Eds](GO Editor Docs] Configuration \u00b6 Configuring New Entities Metadata \u00b6 In the Protege menu, select Preferences. Click on: Annotate new entities with creator (user) Creator property: Add http://www.geneontology.org/formats/oboInOwl#created_by Creator value: Use user name Check: Annotate new entities with creation date and time. Date property: Add http://www.geneontology.org/formats/oboInOwl#creation_date Check: ISO-8601 Configuring User details \u00b6 Select 'User name', and use the supplied user name; that is, your GOC identity. Identifying the user for commits \u00b6 Git needs to know who is committing changes to the repository, so the first time you commit, you may see the following message: Committer: Kimberly Van Auken <vanauken@kimberlukensmbp.dhcp.lbnl.us> Your name and email address were configured automatically based on your username and hostname. Please check that they are accurate. You can suppress this message by setting your name and email explicitly: Type git config --global user.name \"Your Name\" Type git config --global user.email you@example.com . You can then fix the identity used for this commit by typing: git commit --amend --reset-author .","title":"Configs"},{"location":"Configs/#configuration","text":"","title":"Configuration"},{"location":"Configs/#configuring-new-entities-metadata","text":"In the Protege menu, select Preferences. Click on: Annotate new entities with creator (user) Creator property: Add http://www.geneontology.org/formats/oboInOwl#created_by Creator value: Use user name Check: Annotate new entities with creation date and time. Date property: Add http://www.geneontology.org/formats/oboInOwl#creation_date Check: ISO-8601","title":"Configuring New Entities Metadata"},{"location":"Configs/#configuring-user-details","text":"Select 'User name', and use the supplied user name; that is, your GOC identity.","title":"Configuring User details"},{"location":"Configs/#identifying-the-user-for-commits","text":"Git needs to know who is committing changes to the repository, so the first time you commit, you may see the following message: Committer: Kimberly Van Auken <vanauken@kimberlukensmbp.dhcp.lbnl.us> Your name and email address were configured automatically based on your username and hostname. Please check that they are accurate. You can suppress this message by setting your name and email explicitly: Type git config --global user.name \"Your Name\" Type git config --global user.email you@example.com . You can then fix the identity used for this commit by typing: git commit --amend --reset-author .","title":"Identifying the user for commits"},{"location":"CreateNewTerm/","text":"Please refer to https://oboacademy.github.io/obook/howto/create-new-term/","title":"CreateNewTerm"},{"location":"CreatingRepo/","text":"Please refer to https://oboacademy.github.io/obook/howto/odk-create-repo/","title":"CreatingRepo"},{"location":"DailyWorkflow/","text":"NOTE This documentation is incomplete, for now you may be better consulting the GO Editor Docs Daily Workflow \u00b6 Updating the local copy of the ontology with 'git pull' \u00b6 Navigate to the ontology directory of go-ontology: cd repos/MY-ONTOLOGY/src/ontology . If the terminal window is not configured to display the branch name, type: git status . You will see: On branch [master] [or the name of the branch you are on] Your branch is up-to-date with 'origin/master'. If you\u2019re not in the master branch, type: git checkout master . From the master branch, type: git pull . This will update your master branch, and all working branches, with the files that are most current on GitHub, bringing in and merging any changes that were made since you last pulled the repository using the command git pull . You will see something like this: ~/repos/MY-ONTOLOGY(master) $ git pull remote: Counting objects: 26, done. remote: Compressing objects: 100% (26/26), done. remote: Total 26 (delta 12), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (26/26), done. From https://github.com/geneontology/go-ontology 580c01d..7225e89 master -> origin/master * [new branch] issue#13029 -> origin/issue#13029 Updating 580c01d..7225e89 Fast-forward src/ontology/go-edit.obo | 39 ++++++++++++++++++++++++--------------- 1 file changed, 24 insertions(+), 15 deletions(-) ~/repos/MY-ONTOLOGY(master) $ Creating a New Working Branch with 'git checkout' \u00b6 When starting to work on a ticket, you should create a new branch of the repository to edit the ontology file. Make sure you are on the master branch before creating a new branch . If the terminal window is not configured to display the branch name, type: git status to check which is the active branch. If necessary, go to master by typing git checkout master . To create a new branch, type: git checkout -b issue-NNNNN in the terminal window. For naming branches , we recommend using the string 'issue-' followed by the issue number. For instance, for this issue in the tracker: https://github.com/geneontology/go-ontology/issues/13390, you would create this branch: git checkout -b issue-13390 . Typing this command will automatically put you in the new branch. You will see this message in your terminal window: ~/repos/MY-ONTOLOGY/src/ontology(master) $ git checkout -b issue-13390 Switched to a new branch 'issue-13390' ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $ Continuing work on an existing Working Branch \u00b6 If you are continuing to do work on an existing branch, in addition to updating master, go to your branch by typing git checkout [branch name] . Note that you can view the existing local branches by typing git branch -l . OPTIONAL : To update the working branch with respect to the current version of the ontology, type git pull origin master . This step is optional because it is not necessary to work on the current version of the ontology; all changes will be synchronized when git merge is performed. Loading, navigating and saving the Ontology in Prot\u00e9g\u00e9 \u00b6 Before launching Prot\u00e9g\u00e9, make sure you are in the correct branch. To check the active branch, type git status . Click on the 'File' pulldown. Open the file: go-edit.obo. The first time, you will have to navigate to repos/MY-ONTOLOGY/src/ontology . Once you have worked on the file, it will show up in the menu under 'Open'/'Recent'. Click on the 'Classes' tab. Searching: Use the search box on the upper right to search for a term in the ontology. Wait for autocomplete to work in the pop-up window. Viewing a term: Double-click on the term. This will reveal the term in the 'Class hierarchy' window after a few seconds. Launching the reasoner: To see the term in the 'Class hierarchy' (inferred) window, you will need to run the 'ELK reasoner'. 'Reasoner' > select ELK 0.4.3, then click 'Start reasoner'. Close the various pop-up warnings about the ELK reasoner. You will now see the terms in the inferred hierarchy. After modification of the ontology, synchronize the reasoner. Go to menu: 'Reasoner' > ' Synchronize reasoner'. NOTE : The only changes that the reasoner will detect are those impacting the ontology structure: changes in equivalence axioms, subclasses, merges, obsoletions, new terms. TIP : When adding new relations/axioms, 'Synchronize' the reasoner. When deleting relations/axioms, it is more reliable to 'Stop' and 'Start' the reasoner again. Use File > Save to save your changes. Committing, pushing and merging your changes to the repository \u00b6 Review : Changes made to the ontology can be viewed by typing git diff in the terminal window. If there are changes that have already been committed, the changes in the active branch relative to master can be viewed by typing git diff master . Commit : Changes can be committed by typing: git commit -m \u2018Meaningful message Fixes #ticketnumber\u2019 go-edit.obo . For example: git commit -m \u2018hepatic stellate cell migration and contraction and regulation terms. Fixes #13390\u2019 go-edit.obo This will save the changes to the go-edit.obo file. The terminal window will show something like: ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $ git commit -m 'Added hepatic stellate cell migration and contraction and regulation terms. Fixes #13390' go-edit.obo [issue-13390 dec9df0] Added hepatic stellate cell migration and contraction and regulation terms. Fixes #13390 1 file changed, 79 insertions(+) ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $ NOTE : The word 'fixes' is a magic word in GitHub; when used in combination with the ticket number, it will automatically close the ticket. In the above example, when the file is merged in GitHub, it will close issue number 13390. Learn more on this GitHub Help Documentation page about 'Closing issues via commit messages' . 'Fixes' is case-insensitive. If you don't want to close the ticket, just refer to the ticket # without the word 'Fixes'. The commit will be associated with the correct ticket but the ticket will remain open. NOTE : It is also possible to type a longer message than allowed when using the '-m' argument; to do this, skip the -m, and a vi window (on mac) will open in which an unlimited description may be typed. TIP : Git needs to know who is committing changes to the repository, so the first time you commit, you may see the following message: Committer: Kimberly Van Auken <vanauken@kimberlukensmbp.dhcp.lbnl.us> Your name and email address were configured automatically based on your username and hostname. Please check that they are accurate. See Configuration instructions to specify your name and email address. Push : To incorporate the changes into the remote repository, type: git push origin mynewbranch . Example: git push origin issue-13390 TIP : Once you have pushed your changes to the repository, they are available for everyone to see, so at this stage you can ask for feedback. Pull In your browser, return to the GO Ontology repository on GitHub. Navigate to the tab labeled as 'Code' geneontology/go-ontology/code . You will see your commit listed at the top of the page in a light yellow box. If you don\u2019t see it, click on the 'Branches' link to reveal it in the list, and click on it. Click the green button 'Compare & pull request' on the right. You may now add comments and ask a colleague to review your pull request. If you want to have the ticket reviewed before closing it, you can select a reviewer for the ticket before you make the pull request by clicking on the 'Reviewers' list and entering a GitHub identifier (e.g. @superuser1). The reviewer will be notified when the pull request is submitted. Since the Pull Request is also a GitHub issue, the reviewer\u2019s comments will show up in the dialog tab of the pull request, similarly to any other issue filed on the tracker. The diff for your file is at the bottom of the page. Examine it as a sanity check. Click on the green box 'Pull request' to generate a pull request. Wait for the Travis checks to complete (this can take a few minutes). If the Travis checks failed, go back to your working copy and correct the reported errrors. Merge If the Travis checks are succesful and if you are done working on that branch , merge the pull request. Confirming the merge will close the ticket if you have used the word 'fixes' in your commit comment. NOTE : Merge the branches only when the work is completed. If there is related work to be done as a follow up to the original request, create a new GitHub ticket and start the process from the beginning. Delete your branch on the repository using the button on the right of the successful merge message. You may also delete the working branch on your local copy. Note that this step is optional. However, if you wish to delete branches on your local machine, in your terminal window: Go back to the master branch by typing git checkout master . Update your local copy of the repository by typing git pull origin master Delete the branch by typing git branch -d workingbranchname . Example: git branch -d issue-13390","title":"DailyWorkflow"},{"location":"DailyWorkflow/#daily-workflow","text":"","title":"Daily Workflow"},{"location":"DailyWorkflow/#updating-the-local-copy-of-the-ontology-with-git-pull","text":"Navigate to the ontology directory of go-ontology: cd repos/MY-ONTOLOGY/src/ontology . If the terminal window is not configured to display the branch name, type: git status . You will see: On branch [master] [or the name of the branch you are on] Your branch is up-to-date with 'origin/master'. If you\u2019re not in the master branch, type: git checkout master . From the master branch, type: git pull . This will update your master branch, and all working branches, with the files that are most current on GitHub, bringing in and merging any changes that were made since you last pulled the repository using the command git pull . You will see something like this: ~/repos/MY-ONTOLOGY(master) $ git pull remote: Counting objects: 26, done. remote: Compressing objects: 100% (26/26), done. remote: Total 26 (delta 12), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (26/26), done. From https://github.com/geneontology/go-ontology 580c01d..7225e89 master -> origin/master * [new branch] issue#13029 -> origin/issue#13029 Updating 580c01d..7225e89 Fast-forward src/ontology/go-edit.obo | 39 ++++++++++++++++++++++++--------------- 1 file changed, 24 insertions(+), 15 deletions(-) ~/repos/MY-ONTOLOGY(master) $","title":"Updating the local copy of the ontology with 'git pull'"},{"location":"DailyWorkflow/#creating-a-new-working-branch-with-git-checkout","text":"When starting to work on a ticket, you should create a new branch of the repository to edit the ontology file. Make sure you are on the master branch before creating a new branch . If the terminal window is not configured to display the branch name, type: git status to check which is the active branch. If necessary, go to master by typing git checkout master . To create a new branch, type: git checkout -b issue-NNNNN in the terminal window. For naming branches , we recommend using the string 'issue-' followed by the issue number. For instance, for this issue in the tracker: https://github.com/geneontology/go-ontology/issues/13390, you would create this branch: git checkout -b issue-13390 . Typing this command will automatically put you in the new branch. You will see this message in your terminal window: ~/repos/MY-ONTOLOGY/src/ontology(master) $ git checkout -b issue-13390 Switched to a new branch 'issue-13390' ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $","title":"Creating a New Working Branch with 'git checkout'"},{"location":"DailyWorkflow/#continuing-work-on-an-existing-working-branch","text":"If you are continuing to do work on an existing branch, in addition to updating master, go to your branch by typing git checkout [branch name] . Note that you can view the existing local branches by typing git branch -l . OPTIONAL : To update the working branch with respect to the current version of the ontology, type git pull origin master . This step is optional because it is not necessary to work on the current version of the ontology; all changes will be synchronized when git merge is performed.","title":"Continuing work on an existing Working Branch"},{"location":"DailyWorkflow/#loading-navigating-and-saving-the-ontology-in-protege","text":"Before launching Prot\u00e9g\u00e9, make sure you are in the correct branch. To check the active branch, type git status . Click on the 'File' pulldown. Open the file: go-edit.obo. The first time, you will have to navigate to repos/MY-ONTOLOGY/src/ontology . Once you have worked on the file, it will show up in the menu under 'Open'/'Recent'. Click on the 'Classes' tab. Searching: Use the search box on the upper right to search for a term in the ontology. Wait for autocomplete to work in the pop-up window. Viewing a term: Double-click on the term. This will reveal the term in the 'Class hierarchy' window after a few seconds. Launching the reasoner: To see the term in the 'Class hierarchy' (inferred) window, you will need to run the 'ELK reasoner'. 'Reasoner' > select ELK 0.4.3, then click 'Start reasoner'. Close the various pop-up warnings about the ELK reasoner. You will now see the terms in the inferred hierarchy. After modification of the ontology, synchronize the reasoner. Go to menu: 'Reasoner' > ' Synchronize reasoner'. NOTE : The only changes that the reasoner will detect are those impacting the ontology structure: changes in equivalence axioms, subclasses, merges, obsoletions, new terms. TIP : When adding new relations/axioms, 'Synchronize' the reasoner. When deleting relations/axioms, it is more reliable to 'Stop' and 'Start' the reasoner again. Use File > Save to save your changes.","title":"Loading, navigating and saving the Ontology in Prot\u00e9g\u00e9"},{"location":"DailyWorkflow/#committing-pushing-and-merging-your-changes-to-the-repository","text":"Review : Changes made to the ontology can be viewed by typing git diff in the terminal window. If there are changes that have already been committed, the changes in the active branch relative to master can be viewed by typing git diff master . Commit : Changes can be committed by typing: git commit -m \u2018Meaningful message Fixes #ticketnumber\u2019 go-edit.obo . For example: git commit -m \u2018hepatic stellate cell migration and contraction and regulation terms. Fixes #13390\u2019 go-edit.obo This will save the changes to the go-edit.obo file. The terminal window will show something like: ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $ git commit -m 'Added hepatic stellate cell migration and contraction and regulation terms. Fixes #13390' go-edit.obo [issue-13390 dec9df0] Added hepatic stellate cell migration and contraction and regulation terms. Fixes #13390 1 file changed, 79 insertions(+) ~/repos/MY-ONTOLOGY/src/ontology(issue-13390) $ NOTE : The word 'fixes' is a magic word in GitHub; when used in combination with the ticket number, it will automatically close the ticket. In the above example, when the file is merged in GitHub, it will close issue number 13390. Learn more on this GitHub Help Documentation page about 'Closing issues via commit messages' . 'Fixes' is case-insensitive. If you don't want to close the ticket, just refer to the ticket # without the word 'Fixes'. The commit will be associated with the correct ticket but the ticket will remain open. NOTE : It is also possible to type a longer message than allowed when using the '-m' argument; to do this, skip the -m, and a vi window (on mac) will open in which an unlimited description may be typed. TIP : Git needs to know who is committing changes to the repository, so the first time you commit, you may see the following message: Committer: Kimberly Van Auken <vanauken@kimberlukensmbp.dhcp.lbnl.us> Your name and email address were configured automatically based on your username and hostname. Please check that they are accurate. See Configuration instructions to specify your name and email address. Push : To incorporate the changes into the remote repository, type: git push origin mynewbranch . Example: git push origin issue-13390 TIP : Once you have pushed your changes to the repository, they are available for everyone to see, so at this stage you can ask for feedback. Pull In your browser, return to the GO Ontology repository on GitHub. Navigate to the tab labeled as 'Code' geneontology/go-ontology/code . You will see your commit listed at the top of the page in a light yellow box. If you don\u2019t see it, click on the 'Branches' link to reveal it in the list, and click on it. Click the green button 'Compare & pull request' on the right. You may now add comments and ask a colleague to review your pull request. If you want to have the ticket reviewed before closing it, you can select a reviewer for the ticket before you make the pull request by clicking on the 'Reviewers' list and entering a GitHub identifier (e.g. @superuser1). The reviewer will be notified when the pull request is submitted. Since the Pull Request is also a GitHub issue, the reviewer\u2019s comments will show up in the dialog tab of the pull request, similarly to any other issue filed on the tracker. The diff for your file is at the bottom of the page. Examine it as a sanity check. Click on the green box 'Pull request' to generate a pull request. Wait for the Travis checks to complete (this can take a few minutes). If the Travis checks failed, go back to your working copy and correct the reported errrors. Merge If the Travis checks are succesful and if you are done working on that branch , merge the pull request. Confirming the merge will close the ticket if you have used the word 'fixes' in your commit comment. NOTE : Merge the branches only when the work is completed. If there is related work to be done as a follow up to the original request, create a new GitHub ticket and start the process from the beginning. Delete your branch on the repository using the button on the right of the successful merge message. You may also delete the working branch on your local copy. Note that this step is optional. However, if you wish to delete branches on your local machine, in your terminal window: Go back to the master branch by typing git checkout master . Update your local copy of the repository by typing git pull origin master Delete the branch by typing git branch -d workingbranchname . Example: git branch -d issue-13390","title":"Committing, pushing and merging your changes to the repository"},{"location":"DealWithLargeOntologies/","text":"Please refer to https://oboacademy.github.io/obook/howto/deal-with-large-ontologies/","title":"DealWithLargeOntologies"},{"location":"DeletingAssertedSubClasses/","text":"Please refer to https://oboacademy.github.io/obook/explanation/deleting-asserted-sub-classes/","title":"DeletingAssertedSubClasses"},{"location":"FrequentlyUsedODKCommands/","text":"Frequently used ODK commands \u00b6 Updates the Makefile to the latest ODK \u00b6 sh run.sh make update_repo Recreates and deploys the automated documentation \u00b6 sh run.sh make update_docs Preparing a new release \u00b6 sh run.sh make prepare_release Refreshing a single import \u00b6 sh run.sh make refresh-% Example: sh run.sh make refresh-chebi Refresh all imports \u00b6 sh run.sh make refresh-imports Refresh all imports excluding large ones \u00b6 sh run.sh make refresh-imports-excluding-large Run all the QC checks \u00b6 sh run.sh make test Print the version of the currently installed ODK \u00b6 sh run.sh make odkversion Checks the OWL2 DL profile validity \u00b6 (of a specific file) sh run.sh make validate_profile_% Example: sh run.sh make validate_profile_hp-edit.owl","title":"Frequently used ODK commands"},{"location":"FrequentlyUsedODKCommands/#frequently-used-odk-commands","text":"","title":"Frequently used ODK commands"},{"location":"FrequentlyUsedODKCommands/#updates-the-makefile-to-the-latest-odk","text":"sh run.sh make update_repo","title":"Updates the Makefile to the latest ODK"},{"location":"FrequentlyUsedODKCommands/#recreates-and-deploys-the-automated-documentation","text":"sh run.sh make update_docs","title":"Recreates and deploys the automated documentation"},{"location":"FrequentlyUsedODKCommands/#preparing-a-new-release","text":"sh run.sh make prepare_release","title":"Preparing a new release"},{"location":"FrequentlyUsedODKCommands/#refreshing-a-single-import","text":"sh run.sh make refresh-% Example: sh run.sh make refresh-chebi","title":"Refreshing a single import"},{"location":"FrequentlyUsedODKCommands/#refresh-all-imports","text":"sh run.sh make refresh-imports","title":"Refresh all imports"},{"location":"FrequentlyUsedODKCommands/#refresh-all-imports-excluding-large-ones","text":"sh run.sh make refresh-imports-excluding-large","title":"Refresh all imports excluding large ones"},{"location":"FrequentlyUsedODKCommands/#run-all-the-qc-checks","text":"sh run.sh make test","title":"Run all the QC checks"},{"location":"FrequentlyUsedODKCommands/#print-the-version-of-the-currently-installed-odk","text":"sh run.sh make odkversion","title":"Print the version of the currently installed ODK"},{"location":"FrequentlyUsedODKCommands/#checks-the-owl2-dl-profile-validity","text":"(of a specific file) sh run.sh make validate_profile_% Example: sh run.sh make validate_profile_hp-edit.owl","title":"Checks the OWL2 DL profile validity"},{"location":"InitialSetup/","text":"Initial Setup for Ontology Developers \u00b6 Installing Protege \u00b6 Follow the instructions on the GO wiki page: http://wiki.geneontology.org/index.php/Protege_setup_for_GO_Eds Need to add more here about the different Views and Tabs needed for working. ID Ranges \u00b6 Curators and projects are assigned specific ID ranges within the prefix for your ontology. See the README-editors.md for your ontology An example: go-idranges.owl NOTE: You should only use IDs within your range. If you have only just set up this repository, modify the idranges file and add yourself or other editors. Setting ID ranges in Protege \u00b6 Once you have your assigned ID range, you need to configure Protege so that your ID range is recorded in the Preferences menu. Protege does not read the idranges file. In the Protege menu, select Preferences. In the resulting pop-up window, click on the New Entities tab and set the values as follows. In the Entity IRI box: Start with: Specified IRI: http://purl.obolibrary.org/obo Followed by: / End with: Auto-generated ID In the Entity Label section: Same as label renderer: IRI: http://www.w3.org/2000/01/rdf-schema#label In the Auto-generated ID section: Numeric Prefix GO_ Suffix: leave this blank Digit Count 7 Start: see go-idranges.owl . Only paste the number after the GO: prefix. Also, note that when you paste in your GO ID range, the number will automatically be converted to a standard number, e.g. pasting 0110001 will be converted to 110,001.) End: see go-idranges.owl Remember last ID between Protege sessions: ALWAYS CHECK THIS ( Note: You want the ID to be remembered to prevent clashes when working in parallel on branches.)","title":"Initial Setup"},{"location":"InitialSetup/#initial-setup-for-ontology-developers","text":"","title":"Initial Setup for Ontology Developers"},{"location":"InitialSetup/#installing-protege","text":"Follow the instructions on the GO wiki page: http://wiki.geneontology.org/index.php/Protege_setup_for_GO_Eds Need to add more here about the different Views and Tabs needed for working.","title":"Installing Protege"},{"location":"InitialSetup/#id-ranges","text":"Curators and projects are assigned specific ID ranges within the prefix for your ontology. See the README-editors.md for your ontology An example: go-idranges.owl NOTE: You should only use IDs within your range. If you have only just set up this repository, modify the idranges file and add yourself or other editors.","title":"ID Ranges"},{"location":"InitialSetup/#setting-id-ranges-in-protege","text":"Once you have your assigned ID range, you need to configure Protege so that your ID range is recorded in the Preferences menu. Protege does not read the idranges file. In the Protege menu, select Preferences. In the resulting pop-up window, click on the New Entities tab and set the values as follows. In the Entity IRI box: Start with: Specified IRI: http://purl.obolibrary.org/obo Followed by: / End with: Auto-generated ID In the Entity Label section: Same as label renderer: IRI: http://www.w3.org/2000/01/rdf-schema#label In the Auto-generated ID section: Numeric Prefix GO_ Suffix: leave this blank Digit Count 7 Start: see go-idranges.owl . Only paste the number after the GO: prefix. Also, note that when you paste in your GO ID range, the number will automatically be converted to a standard number, e.g. pasting 0110001 will be converted to 110,001.) End: see go-idranges.owl Remember last ID between Protege sessions: ALWAYS CHECK THIS ( Note: You want the ID to be remembered to prevent clashes when working in parallel on branches.)","title":"Setting ID ranges in Protege"},{"location":"Installgit/","text":"NOTE This documentation is incomplete, for now you may be better consulting the [http://wiki.geneontology.org/index.php/Installing_and_Using_git](GO Editor Docs] Installing and Using git \u00b6 Installing git \u00b6 In order to locally edit the ontology and push changes back to the GitHub repository, you will need to have git installed on your machine. To check if you already have git installed, or to see what version of git you have, type either of these commands in your terminal: which git or git --version . To install git, follow instructions here: https://git-scm.com/ Note for MacOSX users: it is advised to install Xcode tools. Cloning the go-ontology repository from GitHub \u00b6 Create a directory called repos on your local machine using this command: mkdir repos . Then paste this command into your terminal: git clone https://github.com/geneontology/go-ontology.git . Example result: Cloning into 'go-ontology'... remote: Counting objects: 2541, done. remote: Compressing objects: 100% (100/100), done. remote: Total 2541 (delta 52), reused 0 (delta 0), pack-reused 2440 Receiving objects: 100% (2541/2541), 21.19 MiB | 5.22 MiB/s, done. Resolving deltas: 100% (1532/1532), done. Editing the .profile (or .bashrc) file to indicate the branch you are working on \u00b6 It can be very helpful to know what branch you are working in on your terminal window. You can set this up to display by adding the following information to your .profile file (found by typing ls -a): export GO_REPO=~/repos/MY-ONTOLOGY . $GO_REPO/src/util/git-completion.bash parse_git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/' } PS1=\"\\w\\$(parse_git_branch) $ \" export PATH=$PATH:$HOME/bin/ Note the last line is not relevant to git, but we do this now for later on when we want to run tools like robot.","title":"Installgit"},{"location":"Installgit/#installing-and-using-git","text":"","title":"Installing and Using git"},{"location":"Installgit/#installing-git","text":"In order to locally edit the ontology and push changes back to the GitHub repository, you will need to have git installed on your machine. To check if you already have git installed, or to see what version of git you have, type either of these commands in your terminal: which git or git --version . To install git, follow instructions here: https://git-scm.com/ Note for MacOSX users: it is advised to install Xcode tools.","title":"Installing git"},{"location":"Installgit/#cloning-the-go-ontology-repository-from-github","text":"Create a directory called repos on your local machine using this command: mkdir repos . Then paste this command into your terminal: git clone https://github.com/geneontology/go-ontology.git . Example result: Cloning into 'go-ontology'... remote: Counting objects: 2541, done. remote: Compressing objects: 100% (100/100), done. remote: Total 2541 (delta 52), reused 0 (delta 0), pack-reused 2440 Receiving objects: 100% (2541/2541), 21.19 MiB | 5.22 MiB/s, done. Resolving deltas: 100% (1532/1532), done.","title":"Cloning the go-ontology repository from GitHub"},{"location":"Installgit/#editing-the-profile-or-bashrc-file-to-indicate-the-branch-you-are-working-on","text":"It can be very helpful to know what branch you are working in on your terminal window. You can set this up to display by adding the following information to your .profile file (found by typing ls -a): export GO_REPO=~/repos/MY-ONTOLOGY . $GO_REPO/src/util/git-completion.bash parse_git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/' } PS1=\"\\w\\$(parse_git_branch) $ \" export PATH=$PATH:$HOME/bin/ Note the last line is not relevant to git, but we do this now for later on when we want to run tools like robot.","title":"Editing the .profile (or .bashrc) file to indicate the branch you are working on"},{"location":"License/","text":"Formatting your ontology annotations correctly \u00b6 The new OBO Foundry guidelines encourage the annotation of ontologies with an appropriately formatted description, title and license. Here are some examples that can be used as a guide to implement those in your ontology. RDF/XML Example: \u00b6 <?xml version=\"1.0\"?> <rdf:RDF xmlns=\"http://purl.obolibrary.org/obo/license.owl#\" xml:base=\"http://purl.obolibrary.org/obo/license.owl\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:owl=\"http://www.w3.org/2002/07/owl#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" xmlns:terms=\"http://purl.org/dc/terms/\"> <owl:Ontology rdf:about=\"http://purl.obolibrary.org/obo/license.owl\"> <dc:description rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">An integrated and fictional ontology for the description of abnormal tomato phenotypes.</dc:description> <dc:title rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">Tomato Phenotype Ontology (TPO)</dc:title> <terms:license rdf:resource=\"https://creativecommons.org/licenses/by/3.0/\"/> </owl:Ontology> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/elements/1.1/description\"/> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/elements/1.1/title\"/> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/terms/license\"/> </rdf:RDF> Functional Syntax Example: \u00b6 Prefix(:=<http://purl.obolibrary.org/obo/license.owl#>) Prefix(owl:=<http://www.w3.org/2002/07/owl#>) Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>) Prefix(xml:=<http://www.w3.org/XML/1998/namespace>) Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>) Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>) Ontology(<http://purl.obolibrary.org/obo/license.owl> Annotation(<http://purl.org/dc/elements/1.1/description> \"An integrated and fictional ontology for the description of abnormal tomato phenotypes.\"^^xsd:string) Annotation(<http://purl.org/dc/elements/1.1/title> \"Tomato Phenotype Ontology (TPO)\"^^xsd:string) Annotation(<http://purl.org/dc/terms/license> <https://creativecommons.org/licenses/by/3.0/>) ) OWL/XML Example: \u00b6 <?xml version=\"1.0\"?> <Ontology xmlns=\"http://www.w3.org/2002/07/owl#\" xml:base=\"http://purl.obolibrary.org/obo/license.owl\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" ontologyIRI=\"http://purl.obolibrary.org/obo/license.owl\"> <Prefix name=\"\" IRI=\"http://purl.obolibrary.org/obo/license.owl#\"/> <Prefix name=\"owl\" IRI=\"http://www.w3.org/2002/07/owl#\"/> <Prefix name=\"rdf\" IRI=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"/> <Prefix name=\"xml\" IRI=\"http://www.w3.org/XML/1998/namespace\"/> <Prefix name=\"xsd\" IRI=\"http://www.w3.org/2001/XMLSchema#\"/> <Prefix name=\"rdfs\" IRI=\"http://www.w3.org/2000/01/rdf-schema#\"/> <Annotation> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/description\"/> <Literal>An integrated and fictional ontology for the description of abnormal tomato phenotypes.</Literal> </Annotation> <Annotation> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/title\"/> <Literal>Tomato Phenotype Ontology (TPO)</Literal> </Annotation> <Annotation> <AnnotationProperty abbreviatedIRI=\"terms:license\"/> <IRI>https://creativecommons.org/licenses/by/3.0/</IRI> </Annotation> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/title\"/> </Declaration> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/description\"/> </Declaration> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/terms/license\"/> </Declaration> </Ontology> OBO Example: \u00b6 format-version: 1.2 ontology: license property_value: http://purl.org/dc/elements/1.1/description \"An integrated and fictional ontology for the description of abnormal tomato phenotypes.\" xsd:string property_value: http://purl.org/dc/elements/1.1/title \"Tomato Phenotype Ontology (TPO)\" xsd:string property_value: http://purl.org/dc/terms/license https://creativecommons.org/licenses/by/3.0/","title":"Formatting your ontology annotations correctly"},{"location":"License/#formatting-your-ontology-annotations-correctly","text":"The new OBO Foundry guidelines encourage the annotation of ontologies with an appropriately formatted description, title and license. Here are some examples that can be used as a guide to implement those in your ontology.","title":"Formatting your ontology annotations correctly"},{"location":"License/#rdfxml-example","text":"<?xml version=\"1.0\"?> <rdf:RDF xmlns=\"http://purl.obolibrary.org/obo/license.owl#\" xml:base=\"http://purl.obolibrary.org/obo/license.owl\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:owl=\"http://www.w3.org/2002/07/owl#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" xmlns:terms=\"http://purl.org/dc/terms/\"> <owl:Ontology rdf:about=\"http://purl.obolibrary.org/obo/license.owl\"> <dc:description rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">An integrated and fictional ontology for the description of abnormal tomato phenotypes.</dc:description> <dc:title rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">Tomato Phenotype Ontology (TPO)</dc:title> <terms:license rdf:resource=\"https://creativecommons.org/licenses/by/3.0/\"/> </owl:Ontology> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/elements/1.1/description\"/> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/elements/1.1/title\"/> <owl:AnnotationProperty rdf:about=\"http://purl.org/dc/terms/license\"/> </rdf:RDF>","title":"RDF/XML Example:"},{"location":"License/#functional-syntax-example","text":"Prefix(:=<http://purl.obolibrary.org/obo/license.owl#>) Prefix(owl:=<http://www.w3.org/2002/07/owl#>) Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>) Prefix(xml:=<http://www.w3.org/XML/1998/namespace>) Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>) Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>) Ontology(<http://purl.obolibrary.org/obo/license.owl> Annotation(<http://purl.org/dc/elements/1.1/description> \"An integrated and fictional ontology for the description of abnormal tomato phenotypes.\"^^xsd:string) Annotation(<http://purl.org/dc/elements/1.1/title> \"Tomato Phenotype Ontology (TPO)\"^^xsd:string) Annotation(<http://purl.org/dc/terms/license> <https://creativecommons.org/licenses/by/3.0/>) )","title":"Functional Syntax Example:"},{"location":"License/#owlxml-example","text":"<?xml version=\"1.0\"?> <Ontology xmlns=\"http://www.w3.org/2002/07/owl#\" xml:base=\"http://purl.obolibrary.org/obo/license.owl\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" ontologyIRI=\"http://purl.obolibrary.org/obo/license.owl\"> <Prefix name=\"\" IRI=\"http://purl.obolibrary.org/obo/license.owl#\"/> <Prefix name=\"owl\" IRI=\"http://www.w3.org/2002/07/owl#\"/> <Prefix name=\"rdf\" IRI=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"/> <Prefix name=\"xml\" IRI=\"http://www.w3.org/XML/1998/namespace\"/> <Prefix name=\"xsd\" IRI=\"http://www.w3.org/2001/XMLSchema#\"/> <Prefix name=\"rdfs\" IRI=\"http://www.w3.org/2000/01/rdf-schema#\"/> <Annotation> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/description\"/> <Literal>An integrated and fictional ontology for the description of abnormal tomato phenotypes.</Literal> </Annotation> <Annotation> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/title\"/> <Literal>Tomato Phenotype Ontology (TPO)</Literal> </Annotation> <Annotation> <AnnotationProperty abbreviatedIRI=\"terms:license\"/> <IRI>https://creativecommons.org/licenses/by/3.0/</IRI> </Annotation> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/title\"/> </Declaration> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/elements/1.1/description\"/> </Declaration> <Declaration> <AnnotationProperty IRI=\"http://purl.org/dc/terms/license\"/> </Declaration> </Ontology>","title":"OWL/XML Example:"},{"location":"License/#obo-example","text":"format-version: 1.2 ontology: license property_value: http://purl.org/dc/elements/1.1/description \"An integrated and fictional ontology for the description of abnormal tomato phenotypes.\" xsd:string property_value: http://purl.org/dc/elements/1.1/title \"Tomato Phenotype Ontology (TPO)\" xsd:string property_value: http://purl.org/dc/terms/license https://creativecommons.org/licenses/by/3.0/","title":"OBO Example:"},{"location":"MergeTerms/","text":"Please refer to https://oboacademy.github.io/obook/howto/merge-terms/","title":"MergeTerms"},{"location":"NewSlim/","text":"Please refer to https://oboacademy.github.io/obook/howto/add-new-slim/","title":"NewSlim"},{"location":"NewSlimTerm/","text":"Please refer to https://oboacademy.github.io/obook/howto/add-new-slim/","title":"NewSlimTerm"},{"location":"ObsoleteTerm/","text":"Please refer to https://oboacademy.github.io/obook/howto/obsolete-term/","title":"ObsoleteTerm"},{"location":"ReleaseArtefacts/","text":"Release artefacts \u00b6 We made a first stab add defining release artefacts that should cover all use cases community-wide. We need to (1) agree they are all that is needed and (2) they are defined correctly in terms of ROBOT commands. This functionality replaces what was previously done using OORT. Terminology: \u00b6 The source ontology is the ontology we are talking about. A release artefact is a version of the ontology modified in some specific way, intended for public use. An import is a module of an external ontology which contains all the axioms necessary for the source ontology. A component is a file containing axioms that belong to the source ontology (but are for one reason or another, like definitions.owl, managed in a separate file). An axiom is said to be foreign if it 'belongs' to a different ontology, and native if it belongs to the source ontology. For example, the source ontology might have, for one reason or another, been physically asserted (rather than imported) the axiom TransitiveObjectProperty(BFO:000005). If the source ontology does not 'own' the BFO namespace, this axiom will be considered foreign. There are currently 6 release defined in the ODK: base (required) full (required) non-classified (optional) simple (optional) basic (optional) simple-non-classified (optional, transient) We discuss all of them here in detail. Release artefact 1: base (required) \u00b6 The base file contains all and only native axioms. No further manipulation is performed, in particular no reasoning, redundancy stripping or relaxation. This release artefact is going to be the new backbone of the OBO strategy to combat incompatible imports and consequent lack of interoperability. (Detailed discussions elsewhere, @balhoff has documentation). Every OBO ontology will contain a mandatory base release (should be in the official OBO recommendations as well). The ROBOT command generating the base artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-base.owl: $(SRC) $(OTHER_SRC) $(ROBOT) remove --input $< --select imports --trim false \\ merge $(patsubst %, -i %, $(OTHER_SRC)) \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@ Release artefact 2: full (required) \u00b6 The full release artefact contains all logical axioms, including inferred subsumptions. Redundancy stripping (i.e. redundant subclass of axioms) and typical relaxation operations are performed. All imports and components are merged into the full release artefact to ensure easy version management. The full release represents most closely the actual ontology as it was intended at the time of release, including all its logical implications. Every OBO ontology will contain a mandatory full release. The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-full.owl: $(SRC) $(OTHER_SRC) $(ROBOT) merge --input $< \\ reason --reasoner ELK \\ relax \\ reduce -r ELK \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@ Release artefact 3: non-classified (optional) \u00b6 The non-classified release artefact reflects the 'unmodified state' of the editors file at release time. No operations are performed that modify the axioms in any way, in particular no redundancy stripping. As opposed to the base artefact, both component and imported ontologies are merged into the non-classified release. The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-non-classified.owl: $(SRC) $(OTHER_SRC) $(ROBOT) merge --input $< \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@ Release artefact 4: simple (optional) \u00b6 Many users want a release that can be treated as a simple existential graph of the terms defined in an ontology. This corresponds to the state of OBO ontologies before logical definitions and imports. For example, the only logical axioms in -simple release of CL will contain be of the form CL1 subClassOf CL2 or CL1 subClassOf R some CL3 where R is any objectProperty and CLn is a CL class. This role has be fulfilled by the -simple artefact, which up to now has been supported by OORT. To construct this, we first need to assert inferred classifications, relax equivalentClass axioms to sets of subClassOf axioms and then strip all axioms referencing foreign (imported) classes. As ontologies occasionally end up with forieign classes and axioms merged into the editors file, we achieve this will a filter based on obo-namespace. (e.g. finding all terms with iri matching http://purl.obolibrary.org/obo/CL_{\\d}7). The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(SIMPLESEED): all terms that 'belong' to the ontology $(ROBOT) merge --input $< $(patsubst %, -i %, $(OTHER_SRC)) \\ reason --reasoner {{ project.reasoner }} --equivalent-classes-allowed {{ project.allow_equivalents }} \\ relax \\ remove --axioms equivalent \\ relax \\ filter --term-file $(SIMPLESEED) --select \"annotations ontology anonymous self\" --trim true --signature true \\ reduce -r {{ project.reasoner }} \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@.tmp.owl && mv $@.tmp.owl $@ NOTES: This requires $(ONTOLOGYTERMS) to include all ObjectProperties usesd. --select parents is required for logical axioms to be retained, but results in a few upper-level classes bleeding through. We hope this will be fixed by further improvments to Monarch. Release artefact 5: basic \u00b6 Some legacy users (e.g. MGI) require an OBO DAG version of -simple. OBO files derived from OWL are not guarenteed to be acyclic, but acyclic graphs can be achieved using judicious filtering of relationships (simple existential restrictions) by objectProperty. The -basic release artefact has historically fulfilled this function as part of OORT driven ontology releases. The default -basic version corresponds to the -simple artefact with only 'part of' relationships (BFO:0000050), but others may be added where ontology editors judge these to be useful and safe to add without adding cycles. We generate by taking the simple release and filtering it The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(KEEPRELATIONS): all relations that should be preserved. $(SIMPLESEED): all terms that 'belong' to the ontology $(ROBOT) merge --input $< $(patsubst %, -i %, $(OTHER_SRC)) \\ reason --reasoner {{ project.reasoner }} --equivalent-classes-allowed {{ project.allow_equivalents }} \\ relax \\ remove --axioms equivalent \\ remove --axioms disjoint \\ remove --term-file $(KEEPRELATIONS) --select complement --select object-properties --trim true \\ relax \\ filter --term-file $(SIMPLESEED) --select \"annotations ontology anonymous self\" --trim true --signature true \\ reduce -r {{ project.reasoner }} \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@.tmp.owl && mv $@.tmp.owl $@ Release artefact 6: simple-non-classified (optional) \u00b6 This artefact caters to the very special and hopefully transient case of some ontologies that do not yet trust reasoning (MP, HP). The simple-non-classified artefact corresponds to the simple artefact, just without the reasoning step. $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONTOLOGYTERMS): all terms that 'belong' to the ontology $(ONT)-simple-non-classified.owl: $(SRC) $(OTHER_SRC) $(ONTOLOGYTERMS) $(ROBOT) remove --input $< --select imports \\ merge $(patsubst %, -i %, $(OTHER_SRC)) \\ relax \\ reduce -r ELK \\ filter --term-file $(ONTOLOGYTERMS) --trim true \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@","title":"Release artefacts"},{"location":"ReleaseArtefacts/#release-artefacts","text":"We made a first stab add defining release artefacts that should cover all use cases community-wide. We need to (1) agree they are all that is needed and (2) they are defined correctly in terms of ROBOT commands. This functionality replaces what was previously done using OORT.","title":"Release artefacts"},{"location":"ReleaseArtefacts/#terminology","text":"The source ontology is the ontology we are talking about. A release artefact is a version of the ontology modified in some specific way, intended for public use. An import is a module of an external ontology which contains all the axioms necessary for the source ontology. A component is a file containing axioms that belong to the source ontology (but are for one reason or another, like definitions.owl, managed in a separate file). An axiom is said to be foreign if it 'belongs' to a different ontology, and native if it belongs to the source ontology. For example, the source ontology might have, for one reason or another, been physically asserted (rather than imported) the axiom TransitiveObjectProperty(BFO:000005). If the source ontology does not 'own' the BFO namespace, this axiom will be considered foreign. There are currently 6 release defined in the ODK: base (required) full (required) non-classified (optional) simple (optional) basic (optional) simple-non-classified (optional, transient) We discuss all of them here in detail.","title":"Terminology:"},{"location":"ReleaseArtefacts/#release-artefact-1-base-required","text":"The base file contains all and only native axioms. No further manipulation is performed, in particular no reasoning, redundancy stripping or relaxation. This release artefact is going to be the new backbone of the OBO strategy to combat incompatible imports and consequent lack of interoperability. (Detailed discussions elsewhere, @balhoff has documentation). Every OBO ontology will contain a mandatory base release (should be in the official OBO recommendations as well). The ROBOT command generating the base artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-base.owl: $(SRC) $(OTHER_SRC) $(ROBOT) remove --input $< --select imports --trim false \\ merge $(patsubst %, -i %, $(OTHER_SRC)) \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@","title":"Release artefact 1: base (required)"},{"location":"ReleaseArtefacts/#release-artefact-2-full-required","text":"The full release artefact contains all logical axioms, including inferred subsumptions. Redundancy stripping (i.e. redundant subclass of axioms) and typical relaxation operations are performed. All imports and components are merged into the full release artefact to ensure easy version management. The full release represents most closely the actual ontology as it was intended at the time of release, including all its logical implications. Every OBO ontology will contain a mandatory full release. The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-full.owl: $(SRC) $(OTHER_SRC) $(ROBOT) merge --input $< \\ reason --reasoner ELK \\ relax \\ reduce -r ELK \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@","title":"Release artefact 2: full (required)"},{"location":"ReleaseArtefacts/#release-artefact-3-non-classified-optional","text":"The non-classified release artefact reflects the 'unmodified state' of the editors file at release time. No operations are performed that modify the axioms in any way, in particular no redundancy stripping. As opposed to the base artefact, both component and imported ontologies are merged into the non-classified release. The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONT)-non-classified.owl: $(SRC) $(OTHER_SRC) $(ROBOT) merge --input $< \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@","title":"Release artefact 3: non-classified (optional)"},{"location":"ReleaseArtefacts/#release-artefact-4-simple-optional","text":"Many users want a release that can be treated as a simple existential graph of the terms defined in an ontology. This corresponds to the state of OBO ontologies before logical definitions and imports. For example, the only logical axioms in -simple release of CL will contain be of the form CL1 subClassOf CL2 or CL1 subClassOf R some CL3 where R is any objectProperty and CLn is a CL class. This role has be fulfilled by the -simple artefact, which up to now has been supported by OORT. To construct this, we first need to assert inferred classifications, relax equivalentClass axioms to sets of subClassOf axioms and then strip all axioms referencing foreign (imported) classes. As ontologies occasionally end up with forieign classes and axioms merged into the editors file, we achieve this will a filter based on obo-namespace. (e.g. finding all terms with iri matching http://purl.obolibrary.org/obo/CL_{\\d}7). The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(SIMPLESEED): all terms that 'belong' to the ontology $(ROBOT) merge --input $< $(patsubst %, -i %, $(OTHER_SRC)) \\ reason --reasoner {{ project.reasoner }} --equivalent-classes-allowed {{ project.allow_equivalents }} \\ relax \\ remove --axioms equivalent \\ relax \\ filter --term-file $(SIMPLESEED) --select \"annotations ontology anonymous self\" --trim true --signature true \\ reduce -r {{ project.reasoner }} \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@.tmp.owl && mv $@.tmp.owl $@ NOTES: This requires $(ONTOLOGYTERMS) to include all ObjectProperties usesd. --select parents is required for logical axioms to be retained, but results in a few upper-level classes bleeding through. We hope this will be fixed by further improvments to Monarch.","title":"Release artefact 4: simple (optional)"},{"location":"ReleaseArtefacts/#release-artefact-5-basic","text":"Some legacy users (e.g. MGI) require an OBO DAG version of -simple. OBO files derived from OWL are not guarenteed to be acyclic, but acyclic graphs can be achieved using judicious filtering of relationships (simple existential restrictions) by objectProperty. The -basic release artefact has historically fulfilled this function as part of OORT driven ontology releases. The default -basic version corresponds to the -simple artefact with only 'part of' relationships (BFO:0000050), but others may be added where ontology editors judge these to be useful and safe to add without adding cycles. We generate by taking the simple release and filtering it The ROBOT command generating the full artefact: $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(KEEPRELATIONS): all relations that should be preserved. $(SIMPLESEED): all terms that 'belong' to the ontology $(ROBOT) merge --input $< $(patsubst %, -i %, $(OTHER_SRC)) \\ reason --reasoner {{ project.reasoner }} --equivalent-classes-allowed {{ project.allow_equivalents }} \\ relax \\ remove --axioms equivalent \\ remove --axioms disjoint \\ remove --term-file $(KEEPRELATIONS) --select complement --select object-properties --trim true \\ relax \\ filter --term-file $(SIMPLESEED) --select \"annotations ontology anonymous self\" --trim true --signature true \\ reduce -r {{ project.reasoner }} \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@ --output $@.tmp.owl && mv $@.tmp.owl $@","title":"Release artefact 5: basic"},{"location":"ReleaseArtefacts/#release-artefact-6-simple-non-classified-optional","text":"This artefact caters to the very special and hopefully transient case of some ontologies that do not yet trust reasoning (MP, HP). The simple-non-classified artefact corresponds to the simple artefact, just without the reasoning step. $(SRC): source ontology $(OTHER_SRC): set of component ontologies $(ONTOLOGYTERMS): all terms that 'belong' to the ontology $(ONT)-simple-non-classified.owl: $(SRC) $(OTHER_SRC) $(ONTOLOGYTERMS) $(ROBOT) remove --input $< --select imports \\ merge $(patsubst %, -i %, $(OTHER_SRC)) \\ relax \\ reduce -r ELK \\ filter --term-file $(ONTOLOGYTERMS) --trim true \\ annotate --ontology-iri $(ONTBASE)/$@ --version-iri $(ONTBASE)/releases/$(TODAY)/$@","title":"Release artefact 6: simple-non-classified (optional)"},{"location":"Synonyms/","text":"Please refer to https://oboacademy.github.io/obook/reference/synonyms-obo/","title":"Synonyms"},{"location":"TaxonRestriction/","text":"Please refer to https://oboacademy.github.io/obook/howto/add-taxon-restrictions/","title":"TaxonRestriction"},{"location":"TermComments/","text":"Please refer to https://oboacademy.github.io/obook/explanation/term-comments/","title":"TermComments"}]}